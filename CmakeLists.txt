###########################################################################
#                     CMake Version To Use 
###########################################################################
cmake_minimum_required(VERSION 3.18 FATAL_ERROR)
###########################################################################
#               Warn Against Path To Root Folder
###########################################################################
include(cmake/PreventInSrcBuilds.cmake)
assureoutofsourcebuilds()
############################################################################
#                      Enable Cache System
############################################################################
include("cmake/Cache.cmake")
############################################################################
#                Include The Meta Data Information
############################################################################
include(cmake/MetaData.cmake)
###########################################################################
#               Project Name And Info Via Meta Data  
###########################################################################
project(${META_PROJECT_NAME} LANGUAGES CXX)
###########################################################################
#                    Include For Testing Option
###########################################################################
include(CTest)
###########################################################################
#               This Will Add The Project Build Options 
###########################################################################
include(cmake/ProjectOptions.cmake)
###########################################################################
#      Compiler Settings- Interface Usage Of Project Options      
###########################################################################
include(cmake/ProjectSettings.cmake)
add_library(project_options INTERFACE)
target_compile_features(project_options INTERFACE cxx_std_20)
###########################################################################
#  Compiiler Warnings- Interface Usage For Project Based On Compiler  
###########################################################################
include(cmake/CompilerWarnings.cmake)
add_library(project_warnings INTERFACE)
set_project_warnings(project_warnings)
###########################################################################
# Include The Sanitizers Options If Enabled (Enable In Sanitizers.cmake)
# If Enabled, Arguments Are Passed To The Project Options Interface Lib
###########################################################################
include(cmake/Sanitizers.cmake)
enable_sanitizers(project_options)
###########################################################################
# Include Static Analysis (clang-tidy, cppcheck, include-what-you-use)
###########################################################################
include(cmake/StaticAnalyzers.cmake)
###########################################################################
#                   Use Solution Folders Feature For IDEs                               
###########################################################################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
###########################################################################
#                     Setting Output Directories                             
###########################################################################
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
###########################################################################
#                  Write The Version File Out                              
###########################################################################
file(WRITE "${PROJECT_BINARY_DIR}/VERSION" "${META_NAME_VERSION}")


#############################################################################
#                   Dependencies Will Go Here
#############################################################################

#######################################
# Update Git Submodules If Need Be    #
#######################################
if (ENABLE_GITSUBMODS)
    find_package(Git QUIET)
    if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
        message(CHECK_START "Submodule(s) Updating")
            execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                RESULT_VARIABLE GIT_SUBMOD_RESULT)
            execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --recursive --remote
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                RESULT_VARIABLE GIT_SUBMOD_RESULT)
            if(NOT GIT_SUBMOD_RESULT EQUAL "0")
                message(CHECK_FAIL "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
            endif() 
    endif()
        if(NOT EXISTS "${PROJECT_SOURCE_DIR}/vendor/CommonLibSSE/CMakeLists.txt")
            message(CHECK_FAIL "CommonLibSSE Failed To Download! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
        endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/vendor/json/CMakeLists.txt")
            message(CHECK_FAIL "json Failed To Download! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
        endif()
endif() 
################################## End Git SubModules ################################## 

add_subdirectory("vendor/CommonLibSSE" CommonLibSSE)

###########################################################################
#               Header And Source File Inclusions
###########################################################################
set(sources
    "src/IniHandler.cpp"
    "src/main.cpp"
)
source_group("Source Files" FILES ${sources})

set(headers
    "include/IniHandler.h"
)
source_group("Header Files" FILES ${headers})

set(pch
    "src/Pch/pch.cpp"
    "src/Pch/pch.h"
)
source_group("pch" FILES ${pch})
###########################################################################
#               If Tests Are Enabled, Build Them
###########################################################################
if(ENABLE_TESTING)
  enable_testing()
    message(CHECK_START "Building Tests")
    add_subdirectory(Test)
    message(CHECK_PASS "Finished Building Tests")
else()
    message("Skipping Compilation Of Tests")
endif()
###########################################################################
#                     Creating The DLL
###########################################################################
add_library(
	${META_PROJECT_NAME}
	SHARED
	${headers}
	${sources}
	.clang-format
    .clang-tidy
)
target_include_directories(
	${META_PROJECT_NAME}
	PRIVATE
		${CMAKE_CURRENT_SOURCE_DIR}/include
		${CMAKE_CURRENT_SOURCE_DIR}/src
        ${CMAKE_CURRENT_SOURCE_DIR}/vendor
        ${CMAKE_CURRENT_SOURCE_DIR}/vendor/CommonLibSSE/include
        ${CMAKE_CURRENT_SOURCE_DIR}/vendor/json/include
)
target_link_libraries(
	${META_PROJECT_NAME}
	PRIVATE
        project_options
        project_warnings
		CommonLibSSE::CommonLibSSE
)
target_precompile_headers(${META_PROJECT_NAME}
PUBLIC
${pch})
##########################################################################
# If Enabled, Run Static Analyzers On Targets From StaticAnalyzers.cmake 
##########################################################################
StaticAnalyze(
    ${META_PROJECT_NAME}
)